	&trim = 1	
	letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
	digits = '0123456789'
	symbols = "<=>\+-*/^-,:.;_()[]'"
	logicalvalue = 'true' | 'false' 
	relationalop = '<' | '<=' | '>' | '>=' | '=' | '\='
	arithmeticop = '+' | '-' | '*' | '/' | '^'
	logicop = 'and' | 'or' | '==' | 'not' | '->'
	separator = ',' | ':' | '.' | ';' | ':=' | '_' | 'step' | 'while' | 'until' | 'comment'
	bracket = '(' | ')' | '[' | ']' | "'" | 'begin' | 'end'
	declarator = 'own' | 'Boolean' | 'integer' | 'real' | 'array' | 'switch' | 'procedure'
	specificator = 'string' | 'label' | 'value'
	beginct = 0	 ;*begin statements that haven't been closed yet	
;*Not all of those should be doing GETWORDS; you have to check for operators as well	

	DEFINE('IDENTIFIER(line)')
	DEFINE('NUMBER(line)')
	;*Description: Checks the symbol after a variable for a [ to determine whether to continue
	;* as an array or not.
	DEFINE('ARRAYSIGN(line)')
	DEFINE('BEGINBLOCK(line)')

NEXTL	originalline = input	:f(END)
	ct = 0	:(GETSYMBOL)

;* Gets the individual words of the line
GETSYMBOL
	originalline (SPAN(letters digits) | ANY(symbols)) . output =	:f(NEXTL)
	IDENTIFIER(symbol)	
	

IDENTIFIER line = symbol
	line POS(0) ANY(letters)	:s(ID1)f(ID2) ;*change f to freturn?
ID1	line POS(0) . output =
	line SPAN(letters digits) . T =	
	EQ(SIZE(symbol),SIZE(T)) line	:s(VARIABLE) ;*Next check if it's a variable
ID2	NUMBER(line)	:f(GETSYMBOL) ;* would need to check for symbols next

NUMBER	WPAT = ((ANY('+-') | '') SPAN(digits)) '.' (SPAN(digits) | '')
	line WPAT =	:(GETSYMBOL)


VARIABLE	line = originalline
	line (SPAN(letters digits) | ANY(symbols)) . next = :f(GETSYMBOL) ;*means there was nothing after the var
	ARRAYSIGN(next)
	BEGINBLOCK(next)

;*----------------------------------------------------------------------
READLIST	ct = ct + 1
	GT(ct,1)	:s(INNERLIST)
READLIST1
	originalline (SPAN(letters digits) | ANY(symbols)) . symbol = :f(READLIST2)
	IDENT(symbol,'[')	:s(READLIST)
	IDENT(symbol,']')	:s(ENDLIST)
	list = list symbol	:(READLIST1)
READLIST2
	originalline = input	:f(BAD)S(READLIST1)
ENDLIST	ct = ct - 1
	LT(ct,0)	:S(BAD)
	EQ(ct,0)	:S(GETSYMBOL)F(READLIST1)
INNERLIST
	list = list symbol
INNERLIST1
	originalline (SPAN(letters digits) | ANY(symbols)) . symbol = :f(INNERLIST2)
	IDENT(symbol,']')	:s(INNERLIST3)
	list = list symbol	:(INNERLIST1)
INNERLIST2
	originalline = input	:f(BAD)S(INNERLIST1)
INNERLIST3
	list = list symbol
	ct = ct - 1
	EQ(ct,1)	:s(READLIST1)f(INNERLIST1)
		
;*---------------------------------------------------------------------
BEGINBLOCK


END